{"mappings":"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","sources":["src/models/building.js","src/main.js","src/models/wmts.js","src/models/elevation.js"],"sourcesContent":["\r\nexport function buildingLayer(serverURL, nameType, crs, zoomMinLayer, extent, view) {\r\n    const geometrySource = new itowns.WFSSource({\r\n        url: serverURL,\r\n        typeName: nameType,\r\n        crs: crs,\r\n        extent: extent\r\n    });\r\n\r\n    let ListMesh = {};\r\n\r\n\r\n    const geomLayer = new itowns.FeatureGeometryLayer('Buildings', {\r\n        source: geometrySource,\r\n        zoom: { min: zoomMinLayer },\r\n        style: new itowns.Style({\r\n            fill: {\r\n                color: setColor,\r\n                base_altitude: setAltitude,\r\n                extrusion_height: setExtrusion,\r\n            },\r\n\r\n        }),\r\n        onMeshCreated: function virusspread(mesh, layer) {\r\n            // console.log(\"mesh\")\r\n            // console.log(mesh)\r\n            // console.log(\"layer\")\r\n            // console.log(layer)\r\n            mesh.children.forEach(c => {\r\n\r\n                let geoms = c.children[0].children[0].children[0].feature.geometries\r\n\r\n                // console.log(c.children[0].children[0].children[0])\r\n\r\n\r\n\r\n                let count = 0;\r\n                geoms.map(goem => {\r\n                    count++;\r\n\r\n                    if ((count % 50) == 0) {\r\n\r\n                        let id = goem.properties.id;\r\n                        // console.log(id)\r\n                        ListMesh[id] = {\r\n                            id: id,\r\n                            batMesh: goem,\r\n                            position: {\r\n                                x: (goem.properties.bbox[0] + goem.properties.bbox[2]) / 2,\r\n                                y: (goem.properties.bbox[1] + goem.properties.bbox[3]) / 2,\r\n                                z: goem.properties.z_min\r\n                            },\r\n                            virusProbability: Math.random(),\r\n                        };\r\n                        { {/*  console.log(mesh)  */ } }\r\n\r\n                    }\r\n\r\n\r\n                })\r\n\r\n\r\n\r\n            })\r\n\r\n\r\n        },\r\n    });\r\n\r\n    function setColor(properties) {\r\n        let color = \"rgb(255, 255, 255)\"\r\n        // ne marche pas \r\n        if (Object.keys(ListMesh).includes(properties.id)) {\r\n            console.log(properties.id)\r\n\r\n        }\r\n        return new itowns.THREE.Color(color);\r\n    }\r\n\r\n    // console.log(listCoords)\r\n\r\n    return { layer: geomLayer, coords: ListMesh, src: geometrySource };\r\n}\r\n\r\n// Coloring the data\r\n\r\n\r\n// Extruding the data \r\nfunction setExtrusion(properties) {\r\n    return properties.hauteur;\r\n}\r\n\r\n// Placing the data on the ground\r\nfunction setAltitude(properties) {\r\n    return properties.z_min - properties.hauteur;\r\n}\r\n\r\n\r\n/* Properties example:\r\n            geometry_name: \"the_geom\"\r\n            hauteur: 9\r\n            id: \"bati_indifferencie.19138409\"\r\n            origin_bat: \"Cadastre\"\r\n            prec_alti: 5\r\n            prec_plani: 2.5\r\n            z_max: 83.7\r\n            z_min: 83.7\r\n*/\r\n\r\n\r\nexport function addMeshToScene(x, y, z, view) {\r\n    // creation of the new mesh (a cylinder)\r\n    const THREE = itowns.THREE;\r\n    const geometry = new THREE.SphereGeometry(10, 32, 16)\r\n    const material = new THREE.MeshBasicMaterial({ color: \"rgb(0, 255, 0)\" });\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n\r\n    // get the position on the globe, from the camera\r\n    const cameraTargetPosition = view.controls.getLookAtCoordinate();\r\n    // const cameraTargetPosition = new itowns.Coordinates('EPSG:4326', x, y, z *******\r\n    // position of the mesh\r\n    const meshCoord = cameraTargetPosition;\r\n    meshCoord.altitude += 30;\r\n\r\n    meshCoord.x = x;\r\n    meshCoord.y = y;\r\n\r\n\r\n    // position and orientation of the mesh\r\n    mesh.position.copy(meshCoord.as(view.referenceCrs)); // *****\r\n\r\n    // update coordinate of the mesh\r\n    mesh.updateMatrixWorld(); // *****\r\n\r\n    // add the mesh to the scene\r\n    view.scene.add(mesh);\r\n\r\n    // make the object usable from outside of the function\r\n    view.mesh = mesh;\r\n    view.notifyChange();\r\n\r\n    return mesh\r\n}\r\n","import { wmtsLayer } from \"./models/wmts\";\r\nimport { elevationLayer } from \"./models/elevation\";\r\nimport { buildingLayer, addMeshToScene } from \"./models/building\";\r\n\r\n// View\r\nconst viewerDiv = document.getElementById('viewerDiv');\r\nconst THREE = itowns.THREE;\r\nconst extent = {\r\n    west: 4.77244,\r\n    east: 4.87408,\r\n    south: 45.71694,\r\n    north: 45.80481,\r\n}\r\n\r\nconst placement = {\r\n    coord: new itowns.Coordinates('EPSG:4326', 4.83518, 45.76130),\r\n    range: 3000,\r\n    tilt: 60,\r\n};\r\n\r\n\r\nlet view = new itowns.GlobeView(viewerDiv, placement, {\r\n    atmosphere: {\r\n        Kr: 0.05,\r\n        Km: 0.15,\r\n        ESun: 100.0,\r\n        g: 100,\r\n        innerRadius: 6370000,\r\n        outerRadius: 6370001,\r\n        wavelength: [0.7],\r\n        scaleDepth: 0.38,\r\n    }\r\n});\r\n\r\nconst atmosphere = view.getLayerById('atmosphere');\r\natmosphere.setRealisticOn(true);\r\n// WMTS Layer\r\nconst wmts_layer = wmtsLayer('https://wxs.ign.fr/3ht7xcw6f7nciopo16etuqp2/geoportail/wmts',\r\n    'EPSG:3857',\r\n    'ORTHOIMAGERY.ORTHOPHOTOS',\r\n    'PM',\r\n    'image/jpeg');\r\n\r\nview.addLayer(wmts_layer);\r\n\r\n// Elevation\r\nconst elevation_layer = elevationLayer('https://wxs.ign.fr/3ht7xcw6f7nciopo16etuqp2/geoportail/wmts',\r\n    'EPSG:4326',\r\n    'ELEVATION.ELEVATIONGRIDCOVERAGE.HIGHRES',\r\n    'WGS84G',\r\n    'image/x-bil;bits=32');\r\n\r\nview.addLayer(elevation_layer);\r\n\r\nconst layerCoord = buildingLayer('https://wxs.ign.fr/3ht7xcw6f7nciopo16etuqp2/geoportail/wfs?',\r\n    'BDTOPO_BDD_WLD_WGS84G:bati_indifferencie',\r\n    'EPSG:4326',\r\n    14,\r\n    extent,\r\n    view);\r\n//  GeometryLayer\r\nconst geometry_layer = layerCoord.layer\r\nconst ListMesh = layerCoord.coords // List Mesh\r\n\r\nlet copiedListMesh\r\n\r\n// console.log(\"test\");\r\n// console.log(ListMesh);\r\nview.addLayer(geometry_layer);\r\n\r\n// Durée de l'animation (en secondes)\r\nvar duration = 100;\r\nvar elapsed = 0;\r\n\r\nvar initPos = {}\r\nvar i = 0;\r\nfunction updateAgent(ListMesh) {\r\n    // meshNewPos(meshPosition, destinationPosition)\r\n\r\n    let newMeshPos;\r\n    let randomKey;\r\n\r\n    let keys = Object.keys(ListMesh);\r\n    let keysLength = keys.length;\r\n\r\n    // console.log(\"dfsqfsqdfsqfsdqfd\");\r\n\r\n    Object.entries(ListMesh).forEach(function ([key, val]) {\r\n\r\n        if (val.mesh && val.destination && val.mesh.position) {\r\n            val.elapsed = updatePos(val.mesh, val.mesh.position, val.destination, val.elapsed)\r\n            // console.log(val.mesh.position.distanceTo(val.destination))\r\n            if (val.mesh.position.distanceTo(val.destination) < 50) {\r\n                if (val.elapsed > 1) {\r\n                    val.mesh.material.color.set(\"rgb(255, 0, 0)\")\r\n\r\n                }\r\n                randomKey = keys[Math.floor(Math.random() * keysLength)];\r\n                val.destination = copiedListMesh[randomKey].posBuilding\r\n            }\r\n        }\r\n    })\r\n    // console.log(ListMesh);\r\n}\r\n\r\n\r\nfunction animate() {\r\n    requestAnimationFrame(animate);\r\n\r\n\r\n\r\n    updateAgent(ListMesh)\r\n    view.mainLoop.gfxEngine.renderer.render(view.scene, view.camera.camera3D)\r\n}\r\n\r\n\r\n\r\n\r\n// Listen for globe full initialisation event\r\nview.addEventListener(itowns.GLOBE_VIEW_EVENTS.GLOBE_INITIALIZED, function globeInitialized() {\r\n    // eslint-disable-next-line no-console\r\n    console.info('Globe initialized');\r\n\r\n    let mesh;\r\n    let randomKey;\r\n\r\n    let keys = Object.keys(ListMesh);\r\n    let keysLength = keys.length;\r\n\r\n    // add mesh + pos batiment fix\r\n    Object.entries(ListMesh).forEach(function ([key, val]) {\r\n        randomKey = keys[Math.floor(Math.random() * keysLength)];\r\n        mesh = addMeshToScene(val.position.x, val.position.y, val.position.z, view);\r\n        ListMesh[key].mesh = mesh;\r\n\r\n        ListMesh[key].posBuilding = mesh.position;\r\n\r\n        // console.log(mesh)\r\n    })\r\n\r\n    // add destination\r\n    Object.entries(ListMesh).forEach(function ([key, val]) {\r\n        randomKey = keys[Math.floor(Math.random() * keysLength)];\r\n        ListMesh[key].destination = ListMesh[randomKey].posBuilding;\r\n        ListMesh[key].elapsed = 0;\r\n\r\n        const points = [];\r\n        points.push(ListMesh[key].posBuilding);\r\n        points.push(ListMesh[randomKey].posBuilding);\r\n\r\n        const geometry = new THREE.BufferGeometry().setFromPoints(points);\r\n\r\n        const material = new THREE.LineBasicMaterial({ color: 0x0000ff });\r\n\r\n        const line = new THREE.Line(geometry, material);\r\n\r\n        view.scene.add(line);\r\n\r\n    })\r\n    // console.log('\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"')\r\n    // console.log(ListMesh);\r\n    // updateAgent(ListMesh)\r\n\r\n    copiedListMesh = JSON.parse(JSON.stringify(ListMesh));\r\n\r\n    // console.log(copiedListMesh)\r\n\r\n    animate()\r\n\r\n});\r\n\r\nfunction updatePos(mesh, meshPosition, destinationPosition, elapsed) {\r\n    elapsed++;\r\n    // console.log(elapsed)\r\n    // Interpolation linéaire entre les deux points\r\n    var t = elapsed / (duration * 10000);\r\n    mesh.position.lerpVectors(meshPosition, destinationPosition, t);\r\n    mesh.updateMatrixWorld()\r\n    return elapsed;\r\n}\r\n\r\nfunction distance(x, y, x1, y1) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.x1 = x1;\r\n    this.y1 = y1;\r\n    return Math.sqrt((Math.pow(this.x1 - this.x, 2)) + (Math.pow(this.y1 - this.y, 2)))\r\n}\r\n\r\n\r\n","\r\nexport function wmtsLayer(serverURL, crs, name, tileMatrixSet, format) {\r\n    const colorSource = new itowns.WMTSSource({\r\n        url: serverURL,\r\n        crs: crs,\r\n        name: name,\r\n        tileMatrixSet: tileMatrixSet,\r\n        format: format,\r\n    });\r\n\r\n    const colorLayer = new itowns.ColorLayer('Ortho', {\r\n        source: colorSource,\r\n    });\r\n\r\n    return colorLayer;\r\n}","export function elevationLayer(serverURL, crs, name, tileMatrixSet, format) {\r\n    const elevationSource = new itowns.WMTSSource({\r\n        url: serverURL,\r\n        crs: crs,\r\n        name: name,\r\n        tileMatrixSet: tileMatrixSet,\r\n        format: format,\r\n        tileMatrixSetLimits: {\r\n            11: {\r\n                minTileRow: 442,\r\n                maxTileRow: 1267,\r\n                minTileCol: 1344,\r\n                maxTileCol: 2683\r\n            },\r\n            12: {\r\n                minTileRow: 885,\r\n                maxTileRow: 2343,\r\n                minTileCol: 3978,\r\n                maxTileCol: 5126\r\n            },\r\n            13: {\r\n                minTileRow: 1770,\r\n                maxTileRow: 4687,\r\n                minTileCol: 7957,\r\n                maxTileCol: 10253\r\n            },\r\n            14: {\r\n                minTileRow: 3540,\r\n                maxTileRow: 9375,\r\n                minTileCol: 15914,\r\n                maxTileCol: 20507\r\n            }\r\n        },\r\n    });\r\n\r\n    const eleLayer = new itowns.ElevationLayer('MNT_WORLD', {\r\n        source: elevationSource,\r\n    });\r\n\r\n    return eleLayer;\r\n}"],"names":["$298c0b498438ffe5$var$setExtrusion","properties","hauteur","$298c0b498438ffe5$var$setAltitude","z_min","$298c0b498438ffe5$export$e4a237211f1febd7","x","y","z","view","THREE","itowns","geometry","SphereGeometry","material","MeshBasicMaterial","color","mesh","Mesh","meshCoord","controls","getLookAtCoordinate","altitude","position","copy","as","referenceCrs","updateMatrixWorld","scene","add","notifyChange","$2b6e161c9edcf319$var$viewerDiv","document","getElementById","$2b6e161c9edcf319$var$THREE","$2b6e161c9edcf319$var$placement","coord","Coordinates","range","tilt","$2b6e161c9edcf319$var$view","GlobeView","atmosphere","Kr","Km","ESun","g","innerRadius","outerRadius","wavelength","scaleDepth","getLayerById","setRealisticOn","$2b6e161c9edcf319$var$wmts_layer","serverURL","crs","name","tileMatrixSet","format","colorSource","WMTSSource","url","ColorLayer","source","addLayer","$2b6e161c9edcf319$var$elevation_layer","elevationSource","tileMatrixSetLimits","minTileRow","maxTileRow","minTileCol","maxTileCol","ElevationLayer","$2b6e161c9edcf319$var$layerCoord","nameType","zoomMinLayer","extent","geometrySource","WFSSource","typeName","ListMesh","layer","FeatureGeometryLayer","zoom","min","style","Style","fill","Object","keys","includes","id","console","log","Color","base_altitude","extrusion_height","onMeshCreated","children","forEach","c","geoms","feature","geometries","count","map","goem","batMesh","bbox","virusProbability","Math","random","coords","src","west","east","south","north","$2b6e161c9edcf319$var$geometry_layer","$2b6e161c9edcf319$var$ListMesh","$2b6e161c9edcf319$var$copiedListMesh","$2b6e161c9edcf319$var$duration","$2b6e161c9edcf319$var$updateAgent","randomKey","keysLength","length","entries","key","val","meshPosition","destinationPosition","elapsed","t","destination","lerpVectors","distanceTo","set","floor","posBuilding","$2b6e161c9edcf319$var$animate","requestAnimationFrame","mainLoop","gfxEngine","renderer","render","camera","camera3D","addEventListener","GLOBE_VIEW_EVENTS","GLOBE_INITIALIZED","info","points","push","BufferGeometry","setFromPoints","LineBasicMaterial","line","Line","JSON","parse","stringify"],"version":3,"file":"index.20537fc8.js.map"}